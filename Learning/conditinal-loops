In JavaScript we have the following conditional statements:

    Use if to specify a block of code to be executed, if a specified condition is true
    Use else to specify a block of code to be executed, if the same condition is false
    Use else if to specify a new condition to test, if the first condition is false
    Use switch to specify many alternative blocks of code to be executed

The if Statement
    Use the if statement to specify a block of JavaScript code to be executed if a condition is true.

    Syntax
    if (condition) {
    //  block of code to be executed if the condition is true
    }
                if (hour < 18) {
            greeting = "Good day";
            }


ELSE

Use the else statement to specify a block of code to be executed if the condition is false.

    if (condition) {
    //  block of code to be executed if the condition is true
    } else {
    //  block of code to be executed if the condition is false
    }


        if (hour < 18) {
        greeting = "Good day";
        } else {
        greeting = "Good evening";
        }



The else if Statement

Use the else if statement to specify a new condition if the first condition is false.

    Syntax
    if (condition1) {
    //  block of code to be executed if condition1 is true
    } else if (condition2) {
    //  block of code to be executed if the condition1 is false and condition2 is true
    } else {
    //  block of code to be executed if the condition1 is false and condition2 is false
    }


        if (time < 10) {
        greeting = "Good morning";
        } else if (time < 20) {
        greeting = "Good day";
        } else {
        greeting = "Good evening";
        }


The JavaScript Switch Statement

Use the switch statement to select one of many code blocks to be executed.

    Syntax
    switch(expression) {
    case x:
        // code block
        break;
    case y:
        // code block
        break;
    default:
        // code block
    }
This is how it works:

    The switch expression is evaluated once.
    The value of the expression is compared with the values of each case.
    If there is a match, the associated block of code is executed.
    If there is no match, the default code block is executed.



        <!DOCTYPE html>
        <html>
        <body>

        <h2>JavaScript switch</h2>

        <p id="demo"></p>

        <script>
        let day;
        switch (new Date().getDay()) {
        case 0:
            day = "Sunday";
            break;
        case 1:
            day = "Monday";
            break;
        case 2:
            day = "Tuesday";
            break;
        case 3:
            day = "Wednesday";
            break;
        case 4:
            day = "Thursday";
            break;
        case 5:
            day = "Friday";
            break;
        case  6:
            day = "Saturday";
        }
        document.getElementById("demo").innerHTML = "Today is " + day;
        </script>

        </body>
        </html>


Different Kinds of Loops

JavaScript supports different kinds of loops:

    for - loops through a block of code a number of times
    for/in - loops through the properties of an object
    for/of - loops through the values of an iterable object
    while - loops through a block of code while a specified condition is true
    do/while - also loops through a block of code while a specified condition is true



The For Loop
    The for statement creates a loop with 3 optional expressions:

    for (expression 1; expression 2; expression 3) {
    // code block to be executed
    }

        <!DOCTYPE html>
        <html>
        <body>

        <h2>JavaScript For Loop</h2>

        <p id="demo"></p>

        <script>
        let text = "";

        for (let i = 0; i < 5; i++) {
        text += "The number is " + i + "<br>";
        }

        document.getElementById("demo").innerHTML = text;
        </script>

        </body>
        </html>



The For In Loop
    The JavaScript for in statement loops through the properties of an Object:

        Syntax
        for (key in object) {
        // code block to be executed
        }
            Example
            const person = {fname:"John", lname:"Doe", age:25};

            let text = "";
            for (let x in person) {
            text += person[x];
            }


For In Over Arrays
    The JavaScript for in statement can also loop over the properties of an Array:

        Syntax
        for (variable in array) {
        code
        }
            Example
            const numbers = [45, 4, 9, 16, 25];

            let txt = "";
            for (let x in numbers) {
            txt += numbers[x];
            }

The For Of Loop
    The JavaScript for of statement loops through the values of an iterable object.
    
        Syntax
        for (variable of iterable) {
        // code block to be executed
        }

            const cars = ["BMW", "Volvo", "Mini"];

            let text = "";
            for (let x of cars) {
            text += x;
            }


The While Loop
    The while loop loops through a block of code as long as a specified condition is true.

        Syntax
        while (condition) {
        // code block to be executed
        }

            while (i < 10) {
            text += "The number is " + i;
            i++;
            }


The Do While Loop
    The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.

        Syntax
        do {
        // code block to be executed
        }
        while (condition);


            do {
            text += "The number is " + i;
            i++;
            }
            while (i < 10);